{"version":3,"sources":["Components/Hero.js","Pages/Home.js","Pages/Products.js","Pages/ProductDetails.js","Pages/Error.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Hero","Children","hero","className","defaultProps","Home","props","state","header","content","this","Component","Products","posts","fetch","then","response","json","slice","setState","catch","err","console","log","fetchPosts","map","src","cashewImg","key","id","to","name","ProductDetails","post","body","title","match","params","Error","Navbar","href","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8750ed07.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Hero = ({ Children, hero }) => {\r\n  return <header className={hero}>{Children}</header>;\r\n};\r\n\r\nexport default Hero;\r\n\r\nHero.defaultProps = {\r\n  hero: \"defaultHero\"\r\n};\r\n","import React, { Component } from 'react';\r\n//import User from './User';\r\nimport Hero from '../Components/Hero';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            header: \"This is an header\",\r\n            content: \"This is an content\"\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n \r\n                <h1>{this.state.header} = using state</h1>\r\n                <p>{this.state.content}</p> \r\n                <Hero/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Products extends Component {\r\n    state = {\r\n        posts: []\r\n    }\r\n\r\n    fetchPosts() {\r\n        fetch('https://my-json-server.typicode.com/vatsalnaynak/data/posts')\r\n            .then(response => response.json())\r\n            .then(posts => posts.slice(0, 15))\r\n            .then(posts => this.setState({ posts }))\r\n            .catch(err => {\r\n                console.log(err);\r\n            });\r\n    }\r\n    componentDidMount() {\r\n        this.fetchPosts();\r\n    }\r\n\r\n    render() {\r\n        const posts = this.state.posts\r\n            .map((posts) => <div className=\"col-md-4 pb-4\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                         <img src={posts.cashewImg} className=\"prod-img\" /> \r\n                        <h5 className=\"card-title\">\r\n                            <Link key={posts.id} to={`ProductDetails/${posts.id}`}>{posts.name}</Link>\r\n                        </h5>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            )\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {posts}\r\n                </div>\r\n                {/* <ul>\r\n                    {posts}\r\n                </ul> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//export default Products \r\n\r\n","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class ProductDetails extends Component{\r\n\r\n    state = {\r\n        post: { body: '', title:'' }\r\n    }\r\n\r\n    fetchPosts(){\r\n        fetch(`https://my-json-server.typicode.com/vatsalnaynak/data/posts/${this.props.match.params.id}`)\r\n        .then(response => response.json())\r\n        .then(post => this.setState({post}))\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchPosts();\r\n      }\r\n\r\n    render(){\r\n        return(<div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <img src={this.state.post.cashewImg} className=\"prod-img\" />\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                <h2>{this.state.post.name}</h2>\r\n                <p>{this.state.post.content}</p>\r\n                <Link to={'/Products'} className=\"btn btn-primary btn-sm\">Back</Link>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\n// const ProductDetails = ({match}) => (\r\n//     <div className=\"text-center\">\r\n//         <h2>{match.params.id}</h2>\r\n//         <Link to={'/Products'} className=\"btn btn-primary btn-sm\">Back</Link>\r\n//     </div>\r\n// )","import React from 'react'  \r\n\r\nconst Error = () => <h1>404 Page Not found</h1>  \r\n\r\nexport default Error  ","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport default class Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">E-Commerce</a>\r\n                <ul className=\"navbar-nav navstyle text-left\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/Products\" className=\"nav-link\">Product</Link>\r\n                    </li>\r\n                  \r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\n//import logo from './logo.svg';\nimport Home from './Pages/Home';\nimport Products from './Pages/Products';\nimport ProductDetails from './Pages/ProductDetails';\nimport Error from './Pages/Error';\nimport Navbar from './Components/Navbar';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/Home\" component={Home} />\n        <Route exact path=\"/products/\" component={Products} />\n        <Route exact path=\"/ProductDetails/:id\" component={ProductDetails} />\n        <Route component={Error} />\n      </Switch> \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}